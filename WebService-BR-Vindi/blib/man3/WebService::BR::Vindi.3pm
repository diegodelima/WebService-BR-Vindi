.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "WebService::BR::Vindi 3"
.TH WebService::BR::Vindi 3 "2017-05-18" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WebService::BR::Vindi \- Perl low level implementation of the https://vindi.com.br brazilian payment gateway.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use WebService::BR::Vindi;
\&
\&  # Contruct the object
\&  my $vindi = WebService::BR::Vindi\->new(
\&   api_key => "You API key",
\&   timeout => 120, # HTTP timeout
\&   debug   => 1 );
\&
\&  # Conect to vindi REST API and get the result
\&  # post/get/put/delete methods always returns a perl HASHREF with the resulting data
\&  my $subscription = $vindi\->get( \*(Aqsubscriptions/1234\*(Aq );
\&
\&  if ( $subscription\->{subscription}\->{status} eq \*(Aqactive\*(Aq ) {
\&   # Do whatever you need
\&  }
\&
\&
\&  # A post method example with error handling
\&  # First parameter is the URL endpoint name \- /customer
\&  # Second parameter is the POST DATA \- which will be automatically JSON encoded and sent to the gateway
\&  my $customer = $vindi\->post(
\&   \*(Aqcustomers\*(Aq,
\&   {
\&     "name"          => \*(AqCustomer\*(Aqs name\*(Aq,
\&     "email"         => \*(Aqhis@email.com\*(Aq,
\&     "registry_code" => \*(Aq\*(Aq, 
\&     "code"          => \*(AqXYZ\*(Aq,
\&   }
\&  );
\&
\&
\&  # Wops! Something went wrong!
\&  if ( $payment_profile\->{ErrorStatus} ) {
\&
\&   # "ErrorStatus" key try to translate the error to an human readable format whenever possible, or send whatever si possible back.
\&   warn "Something went terribly wrong while creating the customer: ".$customer\->{ErrorStatus};
\&
\&   # "error" if the vindi\*(Aqs plain error recieved
\&   warn Data::Dumper::Dumper( $customer\->{error} );
\&
\&  # You will probably want to keep this and INSERT in your database
\&  } else {
\&   $customer\->{customer}\->{id};
\&  }
\&
\&
\&  # A little more elaborated example \- create a new payment_profile object
\&  my $payment_profile = $vindi\->post(
\&   \*(Aqpayment_profiles\*(Aq,
\&   { "holder_name"          => \*(AqHolder Name\*(Aq,
\&     "card_expiration"      => \*(Aq12/2012\*(Aq,
\&     "card_number"          => \*(AqXXXXXXXXXXXXXXXX\*(Aq,
\&     "card_cvv"             => \*(AqXXX\*(Aq,
\&     "payment_method_code"  => "credit_card",
\&     "customer_id"          => $customer\->{customer}\->{id} # This is the vindi\*(Aqs customer ID we just created before
\&   }
\&  );
\&
\&   
\&  # Wops! Something went wrong!
\&  if ( $payment_profile\->{ErrorStatus} ) {
\&   warn "Something went terribly wrong while creating your payment profile: ".$payment_profile\->{ErrorStatus};
\&
\&  # All fine!
\&  } else {
\&   # Do whatever you need
\&   $payment_profile\->{payment_profile};
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a straight brindge to the Vindi.com.br payment gateway \s-1API.\s0
.SH "METHDOS"
.IX Header "METHDOS"
.SS "new"
.IX Subsection "new"
Creates the client object.
.IP "api_key" 4
.IX Item "api_key"
You secret Vindi \s-1API\s0 key. Required.
.RS 4
.IP "debug" 4
.IX Item "debug"
Boolean, optional.
.RS 4
.IP "timeout" 4
.IX Item "timeout"
Integer, optional, defaults to 120s
.RS 4
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.SS "get"
.IX Subsection "get"
Make a \s-1GET\s0 request to Vindi \s-1API.\s0
.IP "endpoint" 4
.IX Item "endpoint"
\&\s-1URI PATH.\s0 Required. Example: /customer/123
.Sp
*** You don't need the \*(L"/v1\*(R" prefix.
.RS 4
.RE
.RS 4
.RE
.SS "delete"
.IX Subsection "delete"
Make a \s-1DELETE\s0 request to Vindi \s-1API.\s0
.IP "endpoint" 4
.IX Item "endpoint"
\&\s-1URI PATH.\s0 Required. Example: /customer/123
.RS 4
.RE
.RS 4
.RE
.SS "put"
.IX Subsection "put"
Make a \s-1PUT\s0 request to Vindi \s-1API.\s0
.IP "endpoint" 4
.IX Item "endpoint"
\&\s-1URI PATH.\s0 Required. Example: /customer/123
.RS 4
.RE
.RS 4
.RE
.SS "post"
.IX Subsection "post"
Make a \s-1POST\s0 request to Vindi \s-1API.\s0 You must specify endpoint as first parameter, and a hashref as the second.
.IP "endpoint" 4
.IX Item "endpoint"
\&\s-1URL\s0 endpoint. Required. Example: /customer.
.RS 4
.IP "data" 4
.IX Item "data"
A hash to be sent.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please check Vindi's full v1 \s-1API\s0 docs at http://www.vindi.com.br/
.SH "AUTHOR"
.IX Header "AUTHOR"
Diego de Lima, <diego_de_lima@hotmail.com>
.SS "\s-1SPECIAL THANKS\s0"
.IX Subsection "SPECIAL THANKS"
This module was kindly made available by the https://modeloinicial.com.br/ team.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2017 by root
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 451:" 4
.IX Item "Around line 451:"
\&'=item' outside of any '=over'
.IP "Around line 469:" 4
.IX Item "Around line 469:"
You forgot a '=back' before '=head2'
.Sp
You forgot a '=back' before '=head2'
.Sp
You forgot a '=back' before '=head2'
.Sp
You forgot a '=back' before '=head2'
.IP "Around line 473:" 4
.IX Item "Around line 473:"
\&'=item' outside of any '=over'
.IP "Around line 481:" 4
.IX Item "Around line 481:"
You forgot a '=back' before '=head2'
.Sp
You forgot a '=back' before '=head2'
.IP "Around line 485:" 4
.IX Item "Around line 485:"
\&'=item' outside of any '=over'
.IP "Around line 491:" 4
.IX Item "Around line 491:"
You forgot a '=back' before '=head2'
.Sp
You forgot a '=back' before '=head2'
.IP "Around line 495:" 4
.IX Item "Around line 495:"
\&'=item' outside of any '=over'
.IP "Around line 501:" 4
.IX Item "Around line 501:"
You forgot a '=back' before '=head2'
.Sp
You forgot a '=back' before '=head2'
.IP "Around line 505:" 4
.IX Item "Around line 505:"
\&'=item' outside of any '=over'
.IP "Around line 515:" 4
.IX Item "Around line 515:"
You forgot a '=back' before '=head1'
.Sp
You forgot a '=back' before '=head1'
